{"name": "test_login_valid", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"submitBTN\" type=\"submit\" class=\"btn btn-primary btn-modern w-100 waves-effect\">...</button> is not clickable at point (600, 599). Other element would receive the click: <div class=\"container\">...</div>\n  (Session info: chrome=140.0.7339.81); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nStacktrace:\n0   chromedriver                        0x00000001012b3674 cxxbridge1$str$ptr + 2882776\n1   chromedriver                        0x00000001012ab5a0 cxxbridge1$str$ptr + 2849796\n2   chromedriver                        0x0000000100dd50dc _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 73436\n3   chromedriver                        0x0000000100e21fd0 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 388560\n4   chromedriver                        0x0000000100e2053c _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 381756\n5   chromedriver                        0x0000000100e1e350 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 373072\n6   chromedriver                        0x0000000100e1d74c _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 369996\n7   chromedriver                        0x0000000100e12284 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 323716\n8   chromedriver                        0x0000000100e11d10 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 322320\n9   chromedriver                        0x0000000100e5d66c _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 631916\n10  chromedriver                        0x0000000100e10130 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 315184\n11  chromedriver                        0x0000000101277ba4 cxxbridge1$str$ptr + 2638344\n12  chromedriver                        0x000000010127adbc cxxbridge1$str$ptr + 2651168\n13  chromedriver                        0x0000000101258640 cxxbridge1$str$ptr + 2509988\n14  chromedriver                        0x000000010127b668 cxxbridge1$str$ptr + 2653388\n15  chromedriver                        0x0000000101249ddc cxxbridge1$str$ptr + 2450496\n16  chromedriver                        0x000000010129aef0 cxxbridge1$str$ptr + 2782548\n17  chromedriver                        0x000000010129b070 cxxbridge1$str$ptr + 2782932\n18  chromedriver                        0x00000001012ab1ec cxxbridge1$str$ptr + 2848848\n19  libsystem_pthread.dylib             0x0000000189413fa8 _pthread_start + 148\n20  libsystem_pthread.dylib             0x000000018940eda0 thread_start + 8", "trace": "def test_login_valid():\n        driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()))\n        lp = LoginPage(driver)\n        lp.open()\n>       lp.login(\"user@phptravels.com\", \"demouser\")\n\nphptravels-automation/tests/test_login.py:10: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nphptravels-automation/pages/login_page.py:25: in login\n    self.driver.find_element(*self.SUBMIT).click()\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:120: in click\n    self._execute(Command.CLICK_ELEMENT)\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webelement.py:573: in _execute\n    return self._parent.execute(command, params)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x102bf1160>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...000189413fa8 _pthread_start + 148\\\\n20  libsystem_pthread.dylib             0x000000018940eda0 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element <button id=\"submitBTN\" type=\"submit\" class=\"btn btn-primary btn-modern w-100 waves-effect\">...</button> is not clickable at point (600, 599). Other element would receive the click: <div class=\"container\">...</div>\nE         (Session info: chrome=140.0.7339.81); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#elementclickinterceptedexception\nE       Stacktrace:\nE       0   chromedriver                        0x00000001012b3674 cxxbridge1$str$ptr + 2882776\nE       1   chromedriver                        0x00000001012ab5a0 cxxbridge1$str$ptr + 2849796\nE       2   chromedriver                        0x0000000100dd50dc _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 73436\nE       3   chromedriver                        0x0000000100e21fd0 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 388560\nE       4   chromedriver                        0x0000000100e2053c _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 381756\nE       5   chromedriver                        0x0000000100e1e350 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 373072\nE       6   chromedriver                        0x0000000100e1d74c _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 369996\nE       7   chromedriver                        0x0000000100e12284 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 323716\nE       8   chromedriver                        0x0000000100e11d10 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 322320\nE       9   chromedriver                        0x0000000100e5d66c _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 631916\nE       10  chromedriver                        0x0000000100e10130 _RNvCslE4myv9Sbr3_7___rustc35___rust_no_alloc_shim_is_unstable_v2 + 315184\nE       11  chromedriver                        0x0000000101277ba4 cxxbridge1$str$ptr + 2638344\nE       12  chromedriver                        0x000000010127adbc cxxbridge1$str$ptr + 2651168\nE       13  chromedriver                        0x0000000101258640 cxxbridge1$str$ptr + 2509988\nE       14  chromedriver                        0x000000010127b668 cxxbridge1$str$ptr + 2653388\nE       15  chromedriver                        0x0000000101249ddc cxxbridge1$str$ptr + 2450496\nE       16  chromedriver                        0x000000010129aef0 cxxbridge1$str$ptr + 2782548\nE       17  chromedriver                        0x000000010129b070 cxxbridge1$str$ptr + 2782932\nE       18  chromedriver                        0x00000001012ab1ec cxxbridge1$str$ptr + 2848848\nE       19  libsystem_pthread.dylib             0x0000000189413fa8 _pthread_start + 148\nE       20  libsystem_pthread.dylib             0x000000018940eda0 thread_start + 8\n\n.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: ElementClickInterceptedException"}, "start": 1757491194484, "stop": 1757491200948, "uuid": "02a6d531-da7d-4aad-bcd9-dce11ef96805", "historyId": "1b3ab67c825d5e1624312efd46ba67ec", "testCaseId": "1b3ab67c825d5e1624312efd46ba67ec", "fullName": "phptravels-automation.tests.test_login#test_login_valid", "labels": [{"name": "parentSuite", "value": "phptravels-automation.tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "Magures-MacBook-Air.local"}, {"name": "thread", "value": "10982-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "phptravels-automation.tests.test_login"}], "titlePath": ["phptravels-automation", "tests", "test_login.py"]}